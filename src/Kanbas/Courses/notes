// import React, { useState } from "react";
// import { useSelector } from "react-redux";
// import { Link } from "react-router-dom";

// // Assuming enrollments are passed as a prop or fetched elsewhere
// export default function Dashboard(
//   { courses,
//     course,
//     setCourse,
//     addNewCourse,
//     deleteCourse,
//     updateCourse,
//     enrollments }: {
//       courses: any[];
//       course: any;
//       setCourse: (course: any) => void;
//       addNewCourse: () => void;
//       deleteCourse: (course: any) => void;
//       updateCourse: () => void;
//       enrollments: any[];  // Pass enrollments prop here
//     }) {

//   const currentUser = useSelector((state: any) => state.accountReducer.currentUser);
//   const isStudent = currentUser.role === "STUDENT";

//   // State to toggle between all courses and enrolled courses
//   const [showAllCourses, setShowAllCourses] = useState(false);

//   // Get enrolled courses for the current user based on enrollments data
//   const enrolledCourses = courses.filter(course =>
//     enrollments.some(enrollment =>
//       enrollment.user === currentUser._id && enrollment.course === course._id
//     )
//   );

//   // Toggle function for Enrollments button
//   const handleToggleCourses = () => {
//     setShowAllCourses(!showAllCourses);
//   };

//   return (
//     <div className="p-4" id="wd-dashboard">
//       <h1 id="wd-dashboard-title">Dashboard</h1>
//       <hr />

//       {/* Conditional Enrollments button for Students */}
//       {isStudent ? (
//         <button
//           className="btn btn-primary float-end mt-2 mb-4"
//           id="wd-enrollments-button"
//           style={{ padding: "8px 16px", backgroundColor: "#007bff", color: "#fff" }}
//           onClick={handleToggleCourses}
//         >
//           {showAllCourses ? "Show Enrolled Courses" : "Show All Courses"}
//         </button>
//       ) : (
//         <>
//           {/* New Course Section for Faculty */}
//           <h5>New Course
//             <button className="btn btn-primary float-end" id="wd-add-new-course-click" onClick={addNewCourse}>
//               Add
//             </button>
//             <button className="btn btn-warning float-end me-2" onClick={updateCourse} id="wd-update-course-click">
//               Update
//             </button>
//           </h5>
//           <br />
//           <input
//             defaultValue={course.name}
//             className="form-control mb-2"
//             onChange={(e) => setCourse({ ...course, name: e.target.value })}
//           />
//           <textarea
//             defaultValue={course.description}
//             className="form-control"
//             onChange={(e) => setCourse({ ...course, description: e.target.value })}
//           />
//         </>
//       )}

//       <hr />
//       <h2 id="wd-dashboard-published">Published Courses ({showAllCourses ? courses.length : enrolledCourses.length})</h2>
//       <hr />
//       <div id="wd-dashboard-courses" className="row">
//         <div className="row row-cols-1 row-cols-md-5 g-4">
//           {(showAllCourses ? courses : enrolledCourses).map((course) => (
//             <div className="wd-dashboard-course col" style={{ width: "260px" }} key={course._id}>
//               <div className="card rounded-3 overflow-hidden">
//                 <Link to={`/Kanbas/Courses/${course._id}/Home`} className="wd-dashboard-course-link text-decoration-none text-dark">
//                   <img src="/images/neu.png" width="100%" height={160} alt={`${course.name} thumbnail`} />
//                   <div className="card-body">
//                     <h5 className="wd-dashboard-course-title card-title">{course.name}</h5>
//                     <p className="wd-dashboard-course-title card-text overflow-y-hidden" style={{ maxHeight: 100 }}>
//                       {course.description}
//                     </p>
//                     <button className="btn btn-primary"> Go </button>
//                   </div>
//                 </Link>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// }


// import React, { useState } from "react";
// import { useSelector } from "react-redux";
// import { Link } from "react-router-dom";
// import * as db from "../Kanbas/Databases";
// export default function Dashboard(
//   { courses,
//     course,
//     setCourse,
//     addNewCourse,
//     deleteCourse,
//     updateCourse }: {
//       courses: any[];
//       course: any;
//       setCourse: (course: any) => void;
//       addNewCourse: () => void;
//       deleteCourse: (course: any) => void;
//       updateCourse: () => void;
//     }) {

//   const currentUser = useSelector((state: any) => state.accountReducer.currentUser);
//   const isStudent = currentUser.role === "STUDENT";

//   const [showAllCourses, setShowAllCourses] = useState(false);

//   const enrolledCourses = courses.filter(course =>
//     currentUser.enrolledCourses.includes(course._id)
//   );

//   const handleToggleCourses = () => {
//     setShowAllCourses(!showAllCourses);
//   };

//   return (
//     <div className="p-4" id="wd-dashboard">
//       <h1 id="wd-dashboard-title">Dashboard</h1> <hr />
//       {isStudent ? (
//         <button className="btn btn-primary float-end mt-3 mb-4" id="wd-enrollments-button"
//           style={{ padding: "8px 16px" }}
//           onClick={handleToggleCourses}
//         >
//           {showAllCourses ? "Enrolled Courses" : "All Courses"}
//         </button>
//       ) : (
//         <>
//           {/* New Course Section for Faculty */}
//           <h5>New Course
//             <button className="btn btn-primary float-end" id="wd-add-new-course-click" onClick={addNewCourse}>
//               Add
//             </button>
//             <button className="btn btn-warning float-end me-2" onClick={updateCourse} id="wd-update-course-click">
//               Update
//             </button>
//           </h5>
//           <br />
//           <input
//             defaultValue={course.name}
//             className="form-control mb-2"
//             onChange={(e) => setCourse({ ...course, name: e.target.value })}
//           />
//           <textarea
//             defaultValue={course.description}
//             className="form-control"
//             onChange={(e) => setCourse({ ...course, description: e.target.value })}
//           />
//         </>
//       )}
//       <hr />
//       <h2 id="wd-dashboard-published">Published Courses ({courses.length})</h2> <hr />
//       <div id="wd-dashboard-courses" className="row">
//         <div className="row row-cols-1 row-cols-md-5 g-4">
//           {courses.map((course) => (
//             <div className="wd-dashboard-course col" style={{ width: "260px" }}>
//               <div className="card rounded-3 overflow-hidden">
//                 <Link to={`/Kanbas/Courses/${course._id}/Home`}
//                   className="wd-dashboard-course-link text-decoration-none text-dark" >
//                   <img src="/images/neu.png" width="100%" height={160} />
//                   <div className="card-body">
//                     <h5 className="wd-dashboard-course-title card-title">
//                       {course.name} </h5>
//                     <p className="wd-dashboard-course-title card-text overflow-y-hidden" style={{ maxHeight: 100 }}>
//                       {course.description} </p>
//                     <button className="btn btn-primary"> Go </button>
//                     <button onClick={(event) => {
//                       event.preventDefault();
//                       deleteCourse(course._id);
//                     }} className="btn btn-danger float-end"
//                       id="wd-delete-course-click">
//                       Delete
//                     </button>
//                     <button id="wd-edit-course-click"
//                       onClick={(event) => {
//                         event.preventDefault();
//                         setCourse(course);
//                       }}
//                       className="btn btn-warning me-2 float-end" >
//                       Edit
//                     </button>


//                   </div>
//                 </Link>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//     </div>);
// }

// // // export function courses<T>(courses: any): [any, any] {
// // //   throw new Error("Function not implemented.");
// // // }



// // // import React, { useState } from "react";
// // // import { useSelector, useDispatch } from "react-redux";
// // // import { Link, useNavigate } from "react-router-dom";
// // // import { enrollInCourse, unenrollFromCourse } from "../Kanbas/Courses/Enrollments/reducer";

// // // interface DashboardProps {
// // //   courses: any[];
// // //   course: any;
// // //   setCourse: (course: any) => void;
// // //   addNewCourse: () => void;
// // //   deleteCourse: (course: any) => void;
// // //   updateCourse: () => void;
// // // }

// // // interface Enrollment {
// // //   userId: string;
// // //   courseId: string;
// // // }

// // // export default function Dashboard({
// // //   courses,
// // //   course,
// // //   setCourse,
// // //   addNewCourse,
// // //   deleteCourse,
// // //   updateCourse,
// // // }: DashboardProps) {
// // //   const currentUser = useSelector((state: any) => state.accountReducer.currentUser);
// // //   const enrollments: Enrollment[] = useSelector((state: any) => state.enrollments?.enrollments || []);
// // //   const dispatch = useDispatch();
// // //   const navigate = useNavigate();

// // //   const [showAllCourses, setShowAllCourses] = useState(false);

// // //   const toggleEnrollmentView = () => {
// // //     setShowAllCourses(!showAllCourses);
// // //   };

// // //   const handleEnrollmentToggle = (courseId: string) => {
// // //     if (enrollments.some((enrollment) => enrollment.courseId === courseId && enrollment.userId === currentUser._id)) {
// // //       dispatch(unenrollFromCourse({ userId: currentUser._id, courseId }));
// // //     } else {
// // //       dispatch(enrollInCourse({ userId: currentUser._id, courseId }));
// // //     }
// // //   };

// // //   const handleCourseNavigation = (courseId: string) => {
// // //     if (enrollments.some((enrollment) => enrollment.courseId === courseId && enrollment.userId === currentUser._id)) {
// // //       navigate(`/Kanbas/Courses/${courseId}/Home`);
// // //     } else {
// // //       alert("You must be enrolled in this course to view its content.");
// // //     }
// // //   };

// // //   const filteredCourses = showAllCourses
// // //     ? courses
// // //     : courses.filter((course) =>
// // //       enrollments.some(
// // //         (enrollment) => enrollment.userId === currentUser._id && enrollment.courseId === course._id
// // //       )
// // //     );

// // //   return (
// // //     <div className="p-4" id="wd-dashboard">
// // //       <h1 id="wd-dashboard-title">Dashboard</h1>
// // //       <hr />
// // //       {currentUser.role === "STUDENT" && (
// // //         <button className="btn btn-primary float-end" onClick={toggleEnrollmentView}>
// // //           {showAllCourses ? "My Enrollments" : "All Courses"}
// // //         </button>
// // //       )}

// // //       <h2 id="wd-dashboard-published">Published Courses ({filteredCourses.length})</h2>
// // //       <hr />
// // //       <div id="wd-dashboard-courses" className="row">
// // //         <div className="row row-cols-1 row-cols-md-5 g-4">
// // //           {filteredCourses.map((course) => (
// // //             <div key={course._id} className="wd-dashboard-course col" style={{ width: "260px" }}>
// // //               <div className="card rounded-3 overflow-hidden">
// // //                 <div className="card-body">
// // //                   <h5 className="wd-dashboard-course-title card-title">{course.name}</h5>
// // //                   <p className="wd-dashboard-course-title card-text overflow-y-hidden" style={{ maxHeight: 100 }}>
// // //                     {course.description}
// // //                   </p>
// // //                   <button className="btn btn-primary" onClick={() => handleCourseNavigation(course._id)}>
// // //                     Go
// // //                   </button>
// // //                   {currentUser.role === "STUDENT" &&
// // //                     (enrollments.some((enrollment) => enrollment.courseId === course._id && enrollment.userId === currentUser._id) ? (
// // //                       <button
// // //                         className="btn btn-danger float-end"
// // //                         onClick={() => handleEnrollmentToggle(course._id)}
// // //                       >
// // //                         Unenroll
// // //                       </button>
// // //                     ) : (
// // //                       <button
// // //                         className="btn btn-success float-end"
// // //                         onClick={() => handleEnrollmentToggle(course._id)}
// // //                       >
// // //                         Enroll
// // //                       </button>
// // //                     ))}
// // //                 </div>
// // //               </div>
// // //             </div>
// // //           ))}
// // //         </div>
// // //       </div>
// // //     </div>
// // //   );
// // // }
